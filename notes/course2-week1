. Every concrete type is the type of some class or trait.

This applies to functions, too.

ie, the function:
  Int => String

is:

scala.Function1[Int, String] <- trait


. Since functions are traits, functions can be subclassed:

 -- Maps are functions from keys to values:

ie,

  trait Map[Key, Value] extends (Key => Value)

 -- Sequences are functions mapping int indices to values:

  trait Seq[Elem] extends (Int => Elem)

which is why seq(i) for indexing


. Partial functions

-- subtype of function
-- can define args as well as query whether args are defined for a particular func
   with "isDefinedAt" method



More on For expressions
. all for expressions can be reduced to combinations of flatMap, map, and filter calls,
  so anything that implements these methods can be used in a for expression



Monads
. data structures with map and flatMap
. parametric type M[T] with two operations, flatMap and unit:

trait M[T] {
  def flatMap[U](f: T => M[U]): M[U]
}

def unit[T](x: T): M[T]

. flatMap called 'bind' in most literature in this area
. map can be defined on monad as combination of flatMap and unit:

m map f == m flatMap (x => unit(f(x)))
        == m flatMap (f andThen unit)


. Laws of Monads:
1) Associativity
  ( m flatMap f ) flatMap g == m flatMap ( ( x => f(x) flatMap g) )

2) Left unit
  unit(x) flatMap f == f(x)

3) Right unit
  m flatMap unit == m
